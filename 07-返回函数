1. 求和函数：
如果不需要立刻求和，而是在后面的代码中，
根据需要再计算怎么办？可以不返回求和的结果，而是返回求和的函数：
def lazy_sum(*args):
    def sum():
        ax = 0
        for n in args:
            ax = ax + n
        return ax
    return sum

>>> f = lazy_sum(1, 3, 5, 7, 9)
>>> f
<function lazy_sum.<locals>.sum at 0x101c6ed90>
>>> f()
25

注意：
当我们调用lazy_sum()时，每次调用都会返回一个新的函数，即使传入相同的参数：

>>> f1 = lazy_sum(1, 3, 5, 7, 9)
>>> f2 = lazy_sum(1, 3, 5, 7, 9)
>>> f1==f2
False

2. 闭包
def count():
    fs = []
    for i in range(1, 4):
        def f():
             return i*i
        fs.append(f)
    return fs

f1, f2, f3 = count()

>>> f1()
9
>>> f2()
9
>>> f3()
9
全部都是9！原因就在于返回的函数引用了变量i，但它并非立刻执行。等到3个函数都返回时执行，
它们所引用的变量i已经变成了3，因此最终结果为9。

>>> count()
[<function count.<locals>.f at 0x0213DB70>, <function count.<locals>.f at 0x0213
DC48>, <function count.<locals>.f at 0x0213DC00>]
count() 返回3个函数


如果一定要引用循环变量：
用一个函数的参数绑定循环变量的当前值；
def count_excellent():
    def f(j):
        def g():
            return j*j
        return g
    fs = []
    for i in range(1, 4):
        fs.append(f(i))# f(i)立刻被执行，因此i的当前值被传入f()
    return fs
	
::
重点在append方法中，f只是一个索引，而f(i)是个对象，索引会变化。
