read：通过列表生成式，我们可以直接创建一个列表。
但是，受到内存限制，列表容量肯定是有限的。而且，创建一个包含100万个元素的列表
，不仅占用很大的存储空间，如果我们仅仅需要访问前面几个元素，那后面绝大多数元素占用的空间都白白浪费了。
在Python中，这种一边循环一边计算的机制，称为生成器：generator。

要创建一个generator，有很多种方法。第一种方法很简单，只要把一个列表生成式的[]改成()，就创建了一个generator：

>>> L = [x * x for x in range(10)]
>>> L
[0, 1, 4, 9, 16, 25, 36, 49, 64, 81]
>>> g = (x * x for x in range(10))
>>> g
<generator object <genexpr> at 0x1022ef630>

generator保存的是算法。
next(g)获取下一个元素，实际上我们基本不会用到next方法，一般用for循环获取,
>>> g = (x * x for x in range(10))
>>> for n in g:
...     print(n)

著名的斐波拉契数列（Fibonacci），除第一个和第二个数外，任意一个数都可由前两个数相加得到：

1, 1, 2, 3, 5, 8, 13, 21, 34, ...
# 打印出斐波那契数列前n个数
def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        print(b)
        a, b = b, a + b
        n = n + 1
    return'done'
	
上面的函数和generator仅一步之遥。要把fib函数变成generator，只需要把print(b)改为yield b就可以了：
def fib(max):
    n, a, b = 0, 0, 1
    while n < max:
        yield b
        a, b = b, a + b
        n = n + 1
    return 'done'
	
generator和函数的执行流程不一样。函数是顺序执行，遇到return语句或者最后一行函数语句就返回
。而变成generator的函数，在每次调用next()的时候执行，遇到yield语句中断并且返回，
再次执行时从上次返回的yield语句处继续执行。
怪现象如下：
>>> g = (x * x for x in range(5))
>>>
>>> g
<generator object <genexpr> at 0x02EB16F0>
>>> next(g)
0
>>> next(g)
1
>>> next(g)
4
>>> for n in g:
...     print(n)
...
9
16

>>> g = fib(6)
>>> while True:
...     try:
...         x = next(g)
...         print('g:', x)
...     except StopIteration as e:
...         print('Generator return value:', e.value)
...         break
...
捕获异常打印done.

练习题：杨辉三角
          1
        1   1
      1   2   1
    1   3   3   1
  1   4   6   4   1
1   5   10  10  5   1

def triangles(n):
    x = []
    y = []
    for count in range(1, n+1):
        y = x[:]
        y.append(0)
        x = [1]
        for i in range(1, count):
            x.append(y[i-1] + y[i])
        yield(x)
