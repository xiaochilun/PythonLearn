排序算法

排序也是在程序中经常用到的算法。无论使用冒泡排序还是快速排序，
排序的核心是比较两个元素的大小。如果是数字，我们可以直接比较，
但如果是字符串或者两个dict呢？直接比较数学上的大小是没有意义的，
因此，比较的过程必须通过函数抽象出来。

Python内置的sorted()函数就可以对list进行排序：

整型排序：
>>> sorted([36, 5, -12, 9, -21])
[-21, -12, 5, 9, 36]
此外，sorted()函数也是一个高阶函数，它还可以接收一个key函数来实现自定义的排序，例如按绝对值大小排序：

>>> sorted([36, 5, -12, 9, -21], key=abs)
[5, 9, -12, -21, 36]

字符串排序：
>>> sorted(['bob', 'about', 'Zoo', 'Credit'])
['Credit', 'Zoo', 'about', 'bob']
默认情况下，对字符串排序，是按照ASCII的大小比较的，
由于'Z' < 'a'，结果，大写字母Z会排在小写字母a的前面。

忽略大小写排序：
>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower)
['about', 'bob', 'Credit', 'Zoo']

反向排序：
可以传入第三个参数reverse=True；
>>> sorted(['bob', 'about', 'Zoo', 'Credit'], key=str.lower, reverse=True)
['Zoo', 'Credit', 'bob', 'about']


HomeWork:按名字排序&按分数排序
注意L是一组 Tuple(list)

L = [('Bob', 75), ('Adam', 92), ('Bart', 66), ('Lisa', 88)]
def by_name(t):
    return t[0]
L1 = sorted(L, key=by_name)
print(L1)

def by_score(t):
    return t[1]
L2 = sorted(L, key=by_score, reverse=True)
print(L2)
